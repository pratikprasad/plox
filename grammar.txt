Version 1

    expression -> primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")"


Version 2

    expression -> unary
    unary -> ("!" | "-") unary | primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")"

Version 3

    expression -> factor
    factor -> unary ( ("\" | "*") unary)*
    unary -> ("!" | "-") unary | primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")"

Version 4

    expression -> term
    term -> factor (( "-" | "+" ) factor)*
    factor -> unary ( ("\" | "*") unary)*
    unary -> ("!" | "-") unary | primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")"

Version 5

    expression -> comparison
    comparison -> term (( > | >= | < | <=))*
    term -> factor (( "-" | "+" ) factor)*
    factor -> unary ( ("\" | "*") unary)*
    unary -> ("!" | "-") unary | primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")"

Version 6

    expression -> comma
    comma -> comparision (, comparision)*
    comparison -> term (( > | >= | < | <=))*
    term -> factor (( "-" | "+" ) factor)*
    factor -> unary ( ("\" | "*") unary)*
    unary -> ("!" | "-") unary | primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")"

Version 7

    expression -> ternary
    ternary -> comma | comma "?" comma : comma 
    comma -> comparision (, comparision)*
    comparison -> term (( > | >= | < | <=))*
    term -> factor (( "-" | "+" ) factor)*
    factor -> unary ( ("\" | "*") unary)*
    unary -> ("!" | "-") unary | primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")"
    

Version 8 -- add ternary

    expression -> ternary
    ternary -> comma | comma "?" comma : comma 
    comma -> comparision (, comparision)*
    comparison -> term (( > | >= | < | <=))*
    term -> factor (( "-" | "+" ) factor)*
    factor -> unary (("%" | \" | "*") unary)*
    unary -> ("!" | "-") unary | primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")"

Version 9 -- Add expression statements and prints statements

    program -> statement* EOF
    statement -> exprStmt | printStmt
    exprStmt -> expression ";"
    printStmt -> "print" expression ";"
    expression -> ternary
    ternary -> comma | comma "?" comma : comma 
    comma -> comparision (, comparision)*
    comparison -> term (( > | >= | < | <=))*
    term -> factor (( "-" | "+" ) factor)*
    factor -> unary (("%" | \" | "*") unary)*
    unary -> ("!" | "-") unary | primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")"

Version 10 -- Add variable declarations

    program -> declaration* EOF
    declaration -> varDecl | statement
    varDecl -> "var" identifier ("=" expression)? ";"
    statement -> exprStmt | printStmt
    exprStmt -> expression ";"
    printStmt -> "print" expression ";"
    expression -> ternary
    ternary -> comma | comma "?" comma : comma 
    comma -> comparision (, comparision)*
    comparison -> term (( > | >= | < | <=))*
    term -> factor (( "-" | "+" ) factor)*
    factor -> unary (("%" | \" | "*") unary)*
    unary -> ("!" | "-") unary | primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER

Version 11 -- add assignment 

    program -> declaration* EOF
    declaration -> varDecl | statement
    varDecl -> "var" identifier ("=" expression)? ";"
    statement -> exprStmt | printStmt
    exprStmt -> expression ";"
    printStmt -> "print" expression ";"
    expression -> assignment
    assignment -> IDENTIFIER "=" assignment | ternary
    ternary -> comma | comma "?" comma : comma 
    comma -> comparision (, comparision)*
    comparison -> term (( > | >= | < | <=))*
    term -> factor (( "-" | "+" ) factor)*
    factor -> unary (("%" | \" | "*") unary)*
    unary -> ("!" | "-") unary | primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER

Version 12 -- add block statement

    program -> declaration* EOF
    declaration -> varDecl | statement
    varDecl -> "var" identifier ("=" expression)? ";"
    statement -> exprStmt | printStmt | block
    block -> "{" declaration* "}"
    exprStmt -> expression ";"
    printStmt -> "print" expression ";"
    expression -> assignment
    assignment -> IDENTIFIER "=" assignment | ternary
    ternary -> comma | comma "?" comma : comma 
    comma -> comparision (, comparision)*
    comparison -> term (( > | >= | < | <=))*
    term -> factor (( "-" | "+" ) factor)*
    factor -> unary (("%" | \" | "*") unary)*
    unary -> ("!" | "-") unary | primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER

Version 13 -- if statement

    program -> declaration* EOF
    declaration -> varDecl | statement
    varDecl -> "var" identifier ("=" expression)? ";"
    statement -> exprStmt | printStmt | block | ifStmt
    ifStmt -> "if" "(" expression ")" statement ("else" statement)?
    block -> "{" declaration* "}"
    exprStmt -> expression ";"
    printStmt -> "print" expression ";"
    expression -> assignment
    assignment -> IDENTIFIER "=" assignment | ternary
    ternary -> comma | comma "?" comma : comma 
    comma -> comparision (, comparision)*
    comparison -> term (( > | >= | < | <=))*
    term -> factor (( "-" | "+" ) factor)*
    factor -> unary (("%" | \" | "*") unary)*
    unary -> ("!" | "-") unary | primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER


Version 14 -- logical or and and 

    program -> declaration* EOF
    declaration -> varDecl | statement
    varDecl -> "var" identifier ("=" expression)? ";"
    statement -> exprStmt | printStmt | block | ifStmt
    ifStmt -> "if" "(" expression ")" statement ("else" statement)?
    block -> "{" declaration* "}"
    exprStmt -> expression ";"
    printStmt -> "print" expression ";"
    expression -> assignment
    assignment -> IDENTIFIER "=" assignment | logic_or
    logic_or -> logic_and ("or" logic_and)*
    logic_and -> ternary ("and" ternary)*
    ternary -> comma | comma "?" comma : comma 
    comma -> comparision (, comparision)*
    comparison -> term (( > | >= | < | <=))*
    term -> factor (( "-" | "+" ) factor)*
    factor -> unary (("%" | \" | "*") unary)*
    unary -> ("!" | "-") unary | primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER

Version 15 -- while loop

    program -> declaration* EOF
    declaration -> varDecl | statement
    varDecl -> "var" identifier ("=" expression)? ";"
    statement -> exprStmt | printStmt | block | ifStmt | whileStmt
    whileStmt -> "while" "(" expression ")" statement
    ifStmt -> "if" "(" expression ")" statement ("else" statement)?
    block -> "{" declaration* "}"
    exprStmt -> expression ";"
    printStmt -> "print" expression ";"
    expression -> assignment
    assignment -> IDENTIFIER "=" assignment | logic_or
    logic_or -> logic_and ("or" logic_and)*
    logic_and -> ternary ("and" ternary)*
    ternary -> comma | comma "?" comma : comma 
    comma -> comparision (, comparision)*
    comparison -> term (( > | >= | < | <=))*
    term -> factor (( "-" | "+" ) factor)*
    factor -> unary (("%" | \" | "*") unary)*
    unary -> ("!" | "-") unary | primary
    primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER
